{"version":3,"sources":["webpack:///./src/components/xwd_utils.js","webpack:///./src/components/xwd.js","webpack:///./src/pages/xwd.tsx"],"names":["AC","DN","DIRNAME","ac","dn","Coord","x","y","this","equals","other","nextCell","direction","forwards","increment","ClueSeq","length","ClueDetails","num","clue","letters","releaseDate","cellInArray","array","cell","k","cellInClue","i","FilledCell","props","style","position","width","h","height","v","top","left","className","EmptyCell","useState","contents","setContents","input","useRef","backgroundColor","selected","highlight","ref","onClick","onInput","event","console","log","nativeEvent","data","match","selectNextCell","type","onKeyUp","key","current","value","selectNextClue","moveCell","number","CurrentClue","text","now","Date","getMonth","getDate","padding","fontWeight","margin","Crossword","selectedClueSeq","setSelectedClueSeq","selectedClue","setSelectedClue","selectedCell","setSelectedCell","blackCells","cells","whiteCells","j","blackCell","bCell","push","getWhiteCells","clues","acSquares","dnSquares","whiteSquares","acrossClues","downClues","clueNumber","acrossCount","downCount","l","figureOutClues","Object","entries","clueSeq","date","clueDets","crosswordOnClick","dir","clickedClue","title","preamble","id","Grid","ClueBox","clueCells","doHighlight","justClicked","cellIsBlack","matched","acHighlighted","dnHighlighted","values","dirClues","otherDirection","otherDirClues","newClue","coord","highlightedCells","map","e","display","verticalAlign","border","entry","vals","clueText","len","Clue","clueBoxOnClick","classNames","CrosswordPage","xwdData","useStaticQuery","allXwd2020Json","edges","node","acrossSize","across_size","downSize","down_size","blackSquares","black_squares","rawClues","forEach","element","keywords"],"mappings":"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","file":"component---src-pages-xwd-tsx-1e4bf021e3eef2b83c00.js","sourcesContent":["export const AC = \"ac\";\nexport const DN = \"dn\";\nexport const UP = \"up\";\nexport const DOWN = \"down\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport const DIRNAME = { ac: \"Across\", dn: \"Down\" };\n\nexport class Coord {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  equals(other) {\n    return other !== null && this.x === other.x && this.y === other.y;\n  }\n  nextCell(direction, forwards = true) {\n    const increment = forwards ? 1 : -1;\n    if (direction === AC) {\n      return new Coord(this.x + increment, this.y);\n    } else {\n      return new Coord(this.x, this.y + increment);\n    }\n  }\n}\n\nexport class ClueSeq {\n  constructor(x, y, length, direction) {\n    this.x = x;\n    this.y = y;\n    this.length = length;\n    this.direction = direction;\n  }\n  equals(other) {\n    return (\n      other !== null &&\n      this.x === other.x &&\n      this.y === other.y &&\n      this.length === other.length &&\n      this.direction === other.direction\n    );\n  }\n}\n\nexport class ClueDetails {\n  constructor(num, direction, clue, letters, releaseDate) {\n    this.num = num;\n    this.direction = direction;\n    this.clue = clue;\n    this.letters = letters;\n    this.releaseDate = releaseDate;\n  }\n  equals(other) {\n    return (\n      other !== null &&\n      this.num === other.num &&\n      this.direction === other.direction\n    );\n  }\n}\n\nexport function cellInArray(array, cell) {\n  for (var k = 0; k < array.length; k++) {\n    const { x, y } = array[k];\n    if (x === cell.x && y === cell.y) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function cellInClue(clue, cell) {\n  if (clue.direction === AC) {\n    for (var i = clue.x; i < clue.x + clue.length; i++) {\n      if (cell.x === i && cell.y === clue.y) {\n        return true;\n      }\n    }\n  }\n  if (clue.direction === DN) {\n    for (var i = clue.y; i < clue.y + clue.length; i++) {\n      if (cell.x == clue.x && cell.y == i) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function getWhiteCells(h, v, blackCells) {\n  const cells = [];\n  const whiteCells = [];\n  /* Make array of white cells. */\n  for (let i = 0; i < h; i++) {\n    for (let j = 0; j < v; j++) {\n      let blackCell = false;\n      for (var k = 0; k < blackCells.length; k++) {\n        const bCell = blackCells[k];\n        if (bCell.x === i && bCell.y === j) {\n          blackCell = true;\n        }\n      }\n      if (!blackCell) {\n        whiteCells.push(new Coord(i, j));\n      }\n      cells.push([i, j, blackCell]);\n    }\n  }\n  return [whiteCells, cells];\n}\n\nexport function figureOutClues(acSquares, dnSquares, whiteSquares) {\n  /* Collect clues and write in numbers */\n  var acrossClues = [];\n  var downClues = [];\n  var clueNumber = 1;\n  /* loop from right to left then top to bottom */\n  for (var j = 0; j < dnSquares; j++) {\n    for (var i = 0; i < acSquares; i++) {\n      var cell = new Coord(i, j);\n      var acrossCount = 0;\n      var downCount = 0;\n      if (cellInArray(whiteSquares, cell)) {\n        /* Start of across clue */\n        if (i === 0 || !cellInArray(whiteSquares, new Coord(i - 1, j))) {\n          acrossCount = 1;\n          for (var k = i + 1; k < acSquares; k++) {\n            if (cellInArray(whiteSquares, new Coord(k, j))) {\n              acrossCount += 1;\n            } else {\n              break;\n            }\n          }\n          if (acrossCount > 1) {\n            acrossClues[clueNumber] = new ClueSeq(i, j, acrossCount, AC);\n          }\n        }\n        /* Start of down clue */\n        if (j === 0 || !cellInArray(whiteSquares, new Coord(i, j - 1))) {\n          downCount = 1;\n          for (var l = j + 1; l < dnSquares; l++) {\n            if (cellInArray(whiteSquares, new Coord(i, l))) {\n              downCount += 1;\n            } else {\n              break;\n            }\n          }\n          if (downCount > 1) {\n            downClues[clueNumber] = new ClueSeq(i, j, downCount, DN);\n          }\n        }\n        if (acrossCount > 1 || downCount > 1) {\n          clueNumber += 1;\n        }\n      }\n    }\n  }\n  return {\n    ac: acrossClues,\n    dn: downClues\n  };\n}\n","import React, { useRef, useState } from \"react\";\nimport {\n  AC,\n  DN,\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n  DIRNAME,\n  Coord,\n  cellInClue,\n  figureOutClues,\n  getWhiteCells,\n  ClueDetails,\n} from \"./xwd_utils\";\n\nexport function FilledCell(props) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: props.h + 1 + \"px\",\n        height: props.v + 1 + \"px\",\n        top: props.y + \"px\",\n        left: props.x + \"px\",\n      }}\n      className=\"black-cell\"\n    ></div>\n  );\n}\nexport function EmptyCell(props) {\n  const [contents, setContents] = useState(\"\");\n  const input = useRef(null);\n  const onInput = (event) => {\n    console.log(\"oninput\");\n    console.log(event);\n    console.log(event.nativeEvent);\n    console.log(event.nativeEvent.data);\n    if (event.nativeEvent.data.match(/^[a-z]$/i)) {\n      setContents(event.nativeEvent.data);\n      props.selectNextCell(true);\n    }\n  };\n  const handleKeyUp = (event) => {\n    console.log(\"pressed \" + event.key);\n    console.log(input.current.value);\n    if (event.key === \"Backspace\") {\n      setContents(\"\");\n      props.selectNextCell(false);\n    } else if (event.key === \"Delete\") {\n      setContents(\"\");\n    } else if (event.key === \"Tab\") {\n      props.selectNextClue();\n    } else if (event.key === \"ArrowUp\") {\n      props.moveCell(UP);\n    } else if (event.key === \"ArrowDown\") {\n      props.moveCell(DOWN);\n    } else if (event.key === \"ArrowLeft\") {\n      props.moveCell(LEFT);\n    } else if (event.key === \"ArrowRight\") {\n      props.moveCell(RIGHT);\n    }\n  };\n  let backgroundColor = props.selected\n    ? \"cyan\"\n    : props.highlight\n    ? \"lightblue\"\n    : \"lightgray\";\n\n  return (\n    <>\n      <input\n        style={{\n          position: \"absolute\",\n          width: props.h - 1 + \"px\",\n          height: props.v - 1 + \"px\",\n          top: props.y + \"px\",\n          left: props.x + \"px\",\n          backgroundColor: backgroundColor,\n        }}\n        ref={input}\n        onClick={props.onClick}\n        onInput={onInput}\n        className=\"white-cell\"\n        type=\"text\"\n        onKeyUp={handleKeyUp}\n        value={contents}\n      ></input>\n      <div\n        className=\"clue-number\"\n        style={{\n          position: \"absolute\",\n          width: props.h - 1 + \"px\",\n          height: props.v - 1 + \"px\",\n          top: props.y + \"px\",\n          left: props.x + 2 + \"px\",\n        }}\n      >\n        {props.number}\n      </div>\n    </>\n  );\n}\n\nexport function CurrentClue(props) {\n  let text = \"No clue selected.\";\n  if (props.clue !== null) {\n    const { num, direction, clue, letters, releaseDate } = props.clue;\n    const now = new Date();\n    const words =\n      now.getMonth() === 11 && now.getDate() > releaseDate\n        ? clue\n        : `Released on December ${releaseDate}.`;\n    text = `${num} ${direction}. ${words} (${letters})`;\n  }\n  return (\n    <div style={{ padding: \"15px\" }}>\n      <span\n        style={{\n          fontWeight: \"bold\",\n          padding: \"5px\",\n          margin: \"5px\",\n          backgroundColor: \"lightblue\",\n        }}\n      >\n        {text}\n      </span>\n    </div>\n  );\n}\n\nexport function Crossword(props) {\n  // a ClueSeq\n  const [selectedClueSeq, setSelectedClueSeq] = useState(null);\n  // a ClueDetails\n  const [selectedClue, setSelectedClue] = useState(null);\n  // a Coord\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [whiteCells, cells] = getWhiteCells(props.v, props.h, props.blackCells);\n  // different to props.clues\n  const clues = figureOutClues(props.h, props.v, whiteCells);\n  if (selectedClueSeq != null) {\n    for (const [num, clueSeq] of Object.entries(\n      clues[selectedClueSeq.direction]\n    )) {\n      const [clue, letters, date] = props.clues[clueSeq.direction][num];\n      const clueDets = new ClueDetails(\n        num,\n        clueSeq.direction,\n        clue,\n        letters,\n        date\n      );\n      if (clueSeq.equals(selectedClueSeq) && !clueDets.equals(selectedClue)) {\n        setSelectedClue(clueDets);\n      }\n    }\n  }\n  function crosswordOnClick(num, dir) {\n    console.log(`crossword onClick() ${dir} ${num}`);\n    const clickedClue = clues[dir][num];\n    setSelectedClueSeq(clickedClue);\n    setSelectedCell(new Coord(clickedClue.x, clickedClue.y));\n  }\n  return (\n    <>\n      <h1>{props.title}</h1>\n      <p>{props.preamble}</p>\n      <CurrentClue clue={selectedClue}></CurrentClue>\n      <div style={{ margin: \"5px\" }} id=\"xwd-container\">\n        <Grid\n          blackCells={props.blackCells}\n          whiteCells={whiteCells}\n          cells={cells}\n          h={props.h}\n          v={props.h}\n          clues={clues}\n          selectedClue={selectedClueSeq}\n          setSelectedClue={setSelectedClueSeq}\n          selectedCell={selectedCell}\n          setSelectedCell={setSelectedCell}\n        ></Grid>\n      </div>\n      <ClueBox\n        direction={AC}\n        clues={props.clues[AC]}\n        onClick={crosswordOnClick}\n        selectedClue={selectedClue}\n      />\n      <ClueBox\n        direction={DN}\n        clues={props.clues[DN]}\n        onClick={crosswordOnClick}\n        selectedClue={selectedClue}\n      />\n    </>\n  );\n}\n\nexport function Grid(props) {\n  const cellHeight = 30;\n  const cellWidth = 30;\n\n  function cellIsBlack(cell) {\n    for (let i = 0; i < props.blackCells.length; i++) {\n      const blackCell = props.blackCells[i];\n      if (cell.x === blackCell.x && cell.y === blackCell.y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const clueCells = {};\n  for (let [key, value] of Object.entries(props.clues[AC])) {\n    clueCells[key] = new Coord(value.x, value.y);\n  }\n  for (let [key, value] of Object.entries(props.clues[DN])) {\n    clueCells[key] = new Coord(value.x, value.y);\n  }\n  function doHighlight(justClicked) {\n    console.log(\"just clicked\");\n    console.log(justClicked);\n    if (\n      justClicked.x < 0 ||\n      justClicked.x >= props.h ||\n      justClicked.y < 0 ||\n      justClicked.y >= props.v\n    ) {\n      return;\n    }\n    if (cellIsBlack(justClicked)) {\n      return;\n    }\n    props.setSelectedCell(justClicked);\n    let matched = false;\n    for (const cell of props.whiteCells) {\n      if (justClicked.equals(cell)) {\n        matched = true;\n      }\n    }\n    if (!matched) {\n      return;\n    }\n    const highlighted = [];\n    let acHighlighted = null;\n    let dnHighlighted = null;\n    for (let value of Object.values(props.clues[AC])) {\n      if (cellInClue(value, justClicked)) {\n        acHighlighted = value;\n        // If this clue is the highlighted one already carry on.\n        if (props.selectedClue && !props.selectedClue.equals(acHighlighted)) {\n          console.log(\"setiting selected clue to\");\n          console.log(acHighlighted);\n          props.setSelectedClue(acHighlighted);\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n    for (let value of Object.values(props.clues[DN])) {\n      if (cellInClue(value, justClicked)) {\n        dnHighlighted = value;\n        console.log(\"setiting selected clue to\");\n        console.log(dnHighlighted);\n        props.setSelectedClue(dnHighlighted);\n        return;\n      }\n    }\n  }\n\n  function selectNextCell(forwards = true) {\n    const { x, y } = props.selectedCell;\n    if (props.selectedClue.direction === AC) {\n      if (\n        forwards &&\n        x !== props.selectedClue.x + props.selectedClue.length - 1\n      ) {\n        props.setSelectedCell(new Coord(x + 1, y));\n      } else if (!forwards && x !== props.selectedClue.x) {\n        props.setSelectedCell(new Coord(x - 1, y));\n      }\n    }\n    if (props.selectedClue.direction === DN) {\n      if (\n        forwards &&\n        y !== props.selectedClue.y + props.selectedClue.length - 1\n      ) {\n        props.setSelectedCell(new Coord(x, y + 1));\n      } else if (!forwards && y !== props.selectedClue.y) {\n        props.setSelectedCell(new Coord(x, y - 1));\n      }\n    }\n  }\n\n  function moveCell(direction) {\n    if (direction === UP) {\n      doHighlight(props.selectedCell.nextCell(DN, false));\n    } else if (direction === DOWN) {\n      doHighlight(props.selectedCell.nextCell(DN, true));\n    } else if (direction === LEFT) {\n      doHighlight(props.selectedCell.nextCell(AC, false));\n    } else if (direction === RIGHT) {\n      doHighlight(props.selectedCell.nextCell(AC, true));\n    }\n  }\n\n  function selectNextClue() {\n    console.log(\"select next clue\");\n    console.log(props.selectedClue.direction);\n    const dirClues = Object.values(props.clues[props.selectedClue.direction]);\n    const otherDirection = props.selectedClue.direction === AC ? DN : AC;\n    const otherDirClues = Object.values(props.clues[otherDirection]);\n    console.log(otherDirection);\n\n    for (let i = 0; i < dirClues.length; i++) {\n      console.log(\"sel\");\n      console.log(props.selectedClue);\n      console.log(\"iter\");\n      console.log(dirClues[i]);\n      if (props.selectedClue.equals(dirClues[i])) {\n        let newClue;\n        if (i !== dirClues.length - 1) {\n          console.log(\"setting 1\");\n          newClue = dirClues[i + 1];\n        } else {\n          console.log(\"setting 2\");\n          newClue = otherDirClues[0];\n        }\n        props.setSelectedClue(newClue);\n        const coord = new Coord(newClue.x, newClue.y);\n        props.setSelectedCell(coord);\n        break;\n      }\n    }\n  }\n\n  let highlightedCells = [];\n  if (props.selectedClue != null) {\n    const { x, y, length, direction } = props.selectedClue;\n    console.log(x);\n    console.log(y);\n    console.log(length);\n    console.log(direction);\n    if (direction == AC) {\n      for (let i = x; i < x + length; i++) {\n        highlightedCells.push(new Coord(i, y));\n      }\n    } else {\n      for (let i = y; i < y + length; i++) {\n        highlightedCells.push(new Coord(x, i));\n      }\n    }\n  }\n\n  console.log(clueCells);\n  console.log(\"highlights\");\n  console.log(highlightedCells);\n  for (let k = 0; k < props.cells.length; k++) {\n    const [x, y] = props.cells[k];\n    let number = null;\n    for (let [key, value] of Object.entries(clueCells)) {\n      if (value.x === x && value.y === y) {\n        number = key;\n      }\n    }\n    props.cells[k].push(number);\n    let highlight = false;\n    for (let l = 0; l < highlightedCells.length; l++) {\n      if (x === highlightedCells[l].x && y === highlightedCells[l].y) {\n        highlight = true;\n      }\n    }\n    props.cells[k].push(highlight);\n  }\n  console.log(props.cells);\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        width: props.h * cellWidth + \"px\",\n        height: props.v * cellHeight + \"px\",\n      }}\n    >\n      {props.cells.map(([i, j, blackCell, number, highlight]) => {\n        if (blackCell) {\n          return (\n            <FilledCell\n              h={cellWidth}\n              v={cellHeight}\n              x={i * cellWidth}\n              y={j * cellHeight}\n              key={i + props.h * j}\n            />\n          );\n        } else {\n          return (\n            <EmptyCell\n              h={cellWidth}\n              v={cellHeight}\n              x={i * cellWidth}\n              y={j * cellHeight}\n              key={i + props.h * j}\n              number={number}\n              highlight={highlight}\n              selected={\n                props.selectedCell !== null &&\n                i === props.selectedCell.x &&\n                j === props.selectedCell.y\n              }\n              onClick={(e) => doHighlight(new Coord(i, j))}\n              selectNextCell={selectNextCell}\n              selectNextClue={selectNextClue}\n              moveCell={moveCell}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport function ClueBox(props) {\n  function clueBoxOnClick(number) {\n    props.onClick(number, props.direction);\n  }\n  let num = null;\n  let direction = null;\n  if (props.selectedClue !== null) {\n    num = props.selectedClue.num;\n    direction = props.selectedClue.direction;\n  }\n  return (\n    <div\n      style={{\n        fontWeight: \"bold\",\n        width: \"300px\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n        margin: \"5px\",\n      }}\n    >\n      <div style={{ border: \"1px solid black\", padding: \"5px\" }}>\n        {DIRNAME[props.direction]}\n      </div>\n      {Object.entries(props.clues).map((entry) => {\n        const [number, vals] = entry;\n        const selected = props.direction === direction && number === num;\n        const [clueText, len, releaseDate] = vals;\n\n        const now = new Date();\n        const text =\n          now.getMonth() === 11 && now.getDate() > releaseDate\n            ? clueText\n            : `Released on December ${releaseDate}.`;\n        function onClick() {\n          clueBoxOnClick(number);\n        }\n        return (\n          <Clue\n            number={number}\n            clue={text}\n            len={len}\n            onClick={onClick}\n            selected={selected}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport function Clue(props) {\n  let classNames = \"clue\";\n  if (props.selected) {\n    classNames = `${classNames} selected`;\n  }\n  return (\n    <div className={classNames} onClick={props.onClick}>\n      {props.number}. {props.clue} ({props.len})\n    </div>\n  );\n}\n","import React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Crossword } from \"../components/xwd\";\nimport { Coord } from \"../components/xwd_utils\";\n\nconst CrosswordPage = (): JSX.Element => {\n  const data = useStaticQuery(graphql`\n    query XwdQuery {\n      allXwd2020Json {\n        edges {\n          node {\n            title\n            preamble\n            across_size\n            down_size\n            black_squares\n            clues {\n              ac {\n                number\n                clue\n                length\n                date\n              }\n              dn {\n                number\n                clue\n                length\n                date\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const xwdData = data.allXwd2020Json.edges[0].node;\n  const title = xwdData.title;\n  const preamble = xwdData.preamble;\n  const acrossSize = xwdData.across_size;\n  const downSize = xwdData.down_size;\n  const blackSquares = xwdData.black_squares;\n  const rawClues = xwdData.clues;\n  const clues = { ac: {}, dn: {} };\n  rawClues.ac.forEach((element) => {\n    clues.ac[element.number] = [element.clue, element.length, element.date];\n  });\n  rawClues.dn.forEach((element) => {\n    clues.dn[element.number] = [element.clue, element.length, element.date];\n  });\n\n  const blackCells = blackSquares.map(([x, y]) => new Coord(x, y));\n  return (\n    <Layout>\n      <SEO title=\"Crosswords\" keywords={[`gatsby`, `application`, `react`]} />\n      <Crossword\n        title={title}\n        preamble={preamble}\n        blackCells={blackCells}\n        h={acrossSize}\n        v={downSize}\n        clues={clues}\n      />\n    </Layout>\n  );\n};\n\nexport default CrosswordPage;\n"],"sourceRoot":""}