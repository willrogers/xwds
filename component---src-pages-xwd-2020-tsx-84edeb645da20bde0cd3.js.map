{"version":3,"file":"component---src-pages-xwd-2020-tsx-84edeb645da20bde0cd3.js","mappings":"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","sources":["webpack://xwds/./src/pages/xwd2020.tsx","webpack://xwds/./src/components/xwd.js","webpack://xwds/./src/components/xwd_utils.js"],"sourcesContent":["import React from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Crossword } from \"../components/xwd\";\nimport { Coord } from \"../components/xwd_utils\";\n\nconst CrosswordPage = (): JSX.Element => {\n  const data = useStaticQuery(graphql`\n    query {\n      allXwd2020Json {\n        edges {\n          node {\n            title\n            preamble\n            across_size\n            down_size\n            black_squares\n            clues {\n              ac {\n                number\n                clue\n                length\n                date\n              }\n              dn {\n                number\n                clue\n                length\n                date\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const xwdData = data.allXwd2020Json.edges[0].node;\n  const title = xwdData.title;\n  const preamble = xwdData.preamble;\n  const acrossSize = xwdData.across_size;\n  const downSize = xwdData.down_size;\n  const blackSquares = xwdData.black_squares;\n  const rawClues = xwdData.clues;\n  const clues = { ac: {}, dn: {} };\n  rawClues.ac.forEach((element) => {\n    clues.ac[element.number] = [element.clue, element.length, element.date];\n  });\n  rawClues.dn.forEach((element) => {\n    clues.dn[element.number] = [element.clue, element.length, element.date];\n  });\n\n  const blackCells = blackSquares.map(([x, y]) => new Coord(x, y));\n  return (\n    <Layout>\n      <SEO title=\"Crosswords\" keywords={[`gatsby`, `application`, `react`]} />\n      <Crossword\n        title={title}\n        preamble={preamble}\n        blackCells={blackCells}\n        h={acrossSize}\n        v={downSize}\n        clues={clues}\n      />\n    </Layout>\n  );\n};\n\nexport default CrosswordPage;\n","import React, { useState } from \"react\";\nimport {\n  AC,\n  DN,\n  UP,\n  DOWN,\n  LEFT,\n  RIGHT,\n  DIRNAME,\n  Coord,\n  cellInClue,\n  figureOutClues,\n  getWhiteCells,\n  ClueDetails,\n} from \"./xwd_utils\";\n\nexport function FilledCell(props) {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        width: props.h + 1 + \"px\",\n        height: props.v + 1 + \"px\",\n        top: props.y + \"px\",\n        left: props.x + \"px\",\n      }}\n      className=\"black-cell\"\n    ></div>\n  );\n}\nexport function EmptyCell(props) {\n  const [contents, setContents] = useState(\"\");\n  const handleKeyUp = (event) => {\n    console.log(\"pressed \" + event.key);\n    if (event.key.match(/^[a-z]$/i)) {\n      setContents(event.key);\n      props.selectNextCell();\n    } else if (event.key === \"Backspace\") {\n      setContents(\"\");\n      props.selectNextCell(false);\n    } else if (event.key === \"Delete\") {\n      setContents(\"\");\n    } else if (event.key === \"Tab\") {\n      props.selectNextClue();\n    } else if (event.key === \"ArrowUp\") {\n      props.moveCell(UP);\n    } else if (event.key === \"ArrowDown\") {\n      props.moveCell(DOWN);\n    } else if (event.key === \"ArrowLeft\") {\n      props.moveCell(LEFT);\n    } else if (event.key === \"ArrowRight\") {\n      props.moveCell(RIGHT);\n    }\n  };\n  let backgroundColor = props.selected\n    ? \"cyan\"\n    : props.highlight\n    ? \"lightblue\"\n    : \"lightgray\";\n\n  return (\n    <>\n      <input\n        style={{\n          position: \"absolute\",\n          width: props.h - 1 + \"px\",\n          height: props.v - 1 + \"px\",\n          top: props.y + \"px\",\n          left: props.x + \"px\",\n          backgroundColor: backgroundColor,\n        }}\n        ref={(input) => input && props.selected && input.focus()}\n        onClick={props.onClick}\n        className=\"white-cell\"\n        type=\"text\"\n        onKeyUp={handleKeyUp}\n        value={contents}\n      ></input>\n      <div\n        className=\"clue-number\"\n        style={{\n          position: \"absolute\",\n          width: props.h - 1 + \"px\",\n          height: props.v - 1 + \"px\",\n          top: props.y + \"px\",\n          left: props.x + 2 + \"px\",\n        }}\n      >\n        {props.number}\n      </div>\n    </>\n  );\n}\n\nexport function CurrentClue(props) {\n  let text = \"No clue selected.\";\n  if (props.clue !== null) {\n    const { num, direction, clue, letters, releaseDate } = props.clue;\n    const now = new Date();\n    const words =\n      now.getMonth() === 11 && now.getDate() > releaseDate\n        ? clue\n        : `Released on December ${releaseDate}.`;\n    text = `${num} ${direction}. ${words} (${letters})`;\n  }\n  return (\n    <div style={{ padding: \"15px\" }}>\n      <span\n        style={{\n          fontWeight: \"bold\",\n          padding: \"5px\",\n          margin: \"5px\",\n          backgroundColor: \"lightblue\",\n        }}\n      >\n        {text}\n      </span>\n    </div>\n  );\n}\n\nexport function Crossword(props) {\n  // a ClueSeq\n  const [selectedClueSeq, setSelectedClueSeq] = useState(null);\n  // a ClueDetails\n  const [selectedClue, setSelectedClue] = useState(null);\n  // a Coord\n  const [selectedCell, setSelectedCell] = useState(null);\n  const [whiteCells, cells] = getWhiteCells(props.v, props.h, props.blackCells);\n  // different to props.clues\n  const clues = figureOutClues(props.h, props.v, whiteCells);\n  if (selectedClueSeq != null) {\n    for (const [num, clueSeq] of Object.entries(\n      clues[selectedClueSeq.direction]\n    )) {\n      const [clue, letters, date] = props.clues[clueSeq.direction][num];\n      const clueDets = new ClueDetails(\n        num,\n        clueSeq.direction,\n        clue,\n        letters,\n        date\n      );\n      if (clueSeq.equals(selectedClueSeq) && !clueDets.equals(selectedClue)) {\n        setSelectedClue(clueDets);\n      }\n    }\n  }\n  function crosswordOnClick(num, dir) {\n    console.log(`crossword onClick() ${dir} ${num}`);\n    const clickedClue = clues[dir][num];\n    setSelectedClueSeq(clickedClue);\n    setSelectedCell(new Coord(clickedClue.x, clickedClue.y));\n  }\n  return (\n    <>\n      <h1>{props.title}</h1>\n      <p>{props.preamble}</p>\n      <CurrentClue clue={selectedClue}></CurrentClue>\n      <div style={{ margin: \"5px\" }} id=\"xwd-container\">\n        <Grid\n          blackCells={props.blackCells}\n          whiteCells={whiteCells}\n          cells={cells}\n          h={props.h}\n          v={props.h}\n          clues={clues}\n          selectedClue={selectedClueSeq}\n          setSelectedClue={setSelectedClueSeq}\n          selectedCell={selectedCell}\n          setSelectedCell={setSelectedCell}\n        ></Grid>\n      </div>\n      <ClueBox\n        direction={AC}\n        clues={props.clues[AC]}\n        onClick={crosswordOnClick}\n        selectedClue={selectedClue}\n      />\n      <ClueBox\n        direction={DN}\n        clues={props.clues[DN]}\n        onClick={crosswordOnClick}\n        selectedClue={selectedClue}\n      />\n    </>\n  );\n}\n\nexport function Grid(props) {\n  const cellHeight = 30;\n  const cellWidth = 30;\n\n  function cellIsBlack(cell) {\n    for (let i = 0; i < props.blackCells.length; i++) {\n      const blackCell = props.blackCells[i];\n      if (cell.x === blackCell.x && cell.y === blackCell.y) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  const clueCells = {};\n  for (let [key, value] of Object.entries(props.clues[AC])) {\n    clueCells[key] = new Coord(value.x, value.y);\n  }\n  for (let [key, value] of Object.entries(props.clues[DN])) {\n    clueCells[key] = new Coord(value.x, value.y);\n  }\n  function doHighlight(justClicked) {\n    console.log(\"just clicked\");\n    console.log(justClicked);\n    if (\n      justClicked.x < 0 ||\n      justClicked.x >= props.h ||\n      justClicked.y < 0 ||\n      justClicked.y >= props.v\n    ) {\n      return;\n    }\n    if (cellIsBlack(justClicked)) {\n      return;\n    }\n    props.setSelectedCell(justClicked);\n    let matched = false;\n    for (const cell of props.whiteCells) {\n      if (justClicked.equals(cell)) {\n        matched = true;\n      }\n    }\n    if (!matched) {\n      return;\n    }\n    const highlighted = [];\n    let acHighlighted = null;\n    let dnHighlighted = null;\n    for (let value of Object.values(props.clues[AC])) {\n      if (cellInClue(value, justClicked)) {\n        acHighlighted = value;\n        // If this clue is the highlighted one already carry on.\n        if (props.selectedClue && !props.selectedClue.equals(acHighlighted)) {\n          console.log(\"setiting selected clue to\");\n          console.log(acHighlighted);\n          props.setSelectedClue(acHighlighted);\n          return;\n        } else {\n          break;\n        }\n      }\n    }\n    for (let value of Object.values(props.clues[DN])) {\n      if (cellInClue(value, justClicked)) {\n        dnHighlighted = value;\n        console.log(\"setiting selected clue to\");\n        console.log(dnHighlighted);\n        props.setSelectedClue(dnHighlighted);\n        return;\n      }\n    }\n  }\n\n  function selectNextCell(forwards = true) {\n    const { x, y } = props.selectedCell;\n    if (props.selectedClue.direction === AC) {\n      if (\n        forwards &&\n        x !== props.selectedClue.x + props.selectedClue.length - 1\n      ) {\n        props.setSelectedCell(new Coord(x + 1, y));\n      } else if (!forwards && x !== props.selectedClue.x) {\n        props.setSelectedCell(new Coord(x - 1, y));\n      }\n    }\n    if (props.selectedClue.direction === DN) {\n      if (\n        forwards &&\n        y !== props.selectedClue.y + props.selectedClue.length - 1\n      ) {\n        props.setSelectedCell(new Coord(x, y + 1));\n      } else if (!forwards && y !== props.selectedClue.y) {\n        props.setSelectedCell(new Coord(x, y - 1));\n      }\n    }\n  }\n\n  function moveCell(direction) {\n    if (direction === UP) {\n      doHighlight(props.selectedCell.nextCell(DN, false));\n    } else if (direction === DOWN) {\n      doHighlight(props.selectedCell.nextCell(DN, true));\n    } else if (direction === LEFT) {\n      doHighlight(props.selectedCell.nextCell(AC, false));\n    } else if (direction === RIGHT) {\n      doHighlight(props.selectedCell.nextCell(AC, true));\n    }\n  }\n\n  function selectNextClue() {\n    console.log(\"select next clue\");\n    console.log(props.selectedClue.direction);\n    const dirClues = Object.values(props.clues[props.selectedClue.direction]);\n    const otherDirection = props.selectedClue.direction === AC ? DN : AC;\n    const otherDirClues = Object.values(props.clues[otherDirection]);\n    console.log(otherDirection);\n\n    for (let i = 0; i < dirClues.length; i++) {\n      console.log(\"sel\");\n      console.log(props.selectedClue);\n      console.log(\"iter\");\n      console.log(dirClues[i]);\n      if (props.selectedClue.equals(dirClues[i])) {\n        let newClue;\n        if (i !== dirClues.length - 1) {\n          console.log(\"setting 1\");\n          newClue = dirClues[i + 1];\n        } else {\n          console.log(\"setting 2\");\n          newClue = otherDirClues[0];\n        }\n        props.setSelectedClue(newClue);\n        const coord = new Coord(newClue.x, newClue.y);\n        props.setSelectedCell(coord);\n        break;\n      }\n    }\n  }\n\n  let highlightedCells = [];\n  if (props.selectedClue != null) {\n    const { x, y, length, direction } = props.selectedClue;\n    console.log(x);\n    console.log(y);\n    console.log(length);\n    console.log(direction);\n    if (direction == AC) {\n      for (let i = x; i < x + length; i++) {\n        highlightedCells.push(new Coord(i, y));\n      }\n    } else {\n      for (let i = y; i < y + length; i++) {\n        highlightedCells.push(new Coord(x, i));\n      }\n    }\n  }\n\n  console.log(clueCells);\n  console.log(\"highlights\");\n  console.log(highlightedCells);\n  for (let k = 0; k < props.cells.length; k++) {\n    const [x, y] = props.cells[k];\n    let number = null;\n    for (let [key, value] of Object.entries(clueCells)) {\n      if (value.x === x && value.y === y) {\n        number = key;\n      }\n    }\n    props.cells[k].push(number);\n    let highlight = false;\n    for (let l = 0; l < highlightedCells.length; l++) {\n      if (x === highlightedCells[l].x && y === highlightedCells[l].y) {\n        highlight = true;\n      }\n    }\n    props.cells[k].push(highlight);\n  }\n  console.log(props.cells);\n  return (\n    <div\n      style={{\n        position: \"relative\",\n        width: props.h * cellWidth + \"px\",\n        height: props.v * cellHeight + \"px\",\n      }}\n    >\n      {props.cells.map(([i, j, blackCell, number, highlight]) => {\n        if (blackCell) {\n          return (\n            <FilledCell\n              h={cellWidth}\n              v={cellHeight}\n              x={i * cellWidth}\n              y={j * cellHeight}\n              key={i + props.h * j}\n            />\n          );\n        } else {\n          return (\n            <EmptyCell\n              h={cellWidth}\n              v={cellHeight}\n              x={i * cellWidth}\n              y={j * cellHeight}\n              key={i + props.h * j}\n              number={number}\n              highlight={highlight}\n              selected={\n                props.selectedCell !== null &&\n                i === props.selectedCell.x &&\n                j === props.selectedCell.y\n              }\n              onClick={(e) => doHighlight(new Coord(i, j))}\n              selectNextCell={selectNextCell}\n              selectNextClue={selectNextClue}\n              moveCell={moveCell}\n            />\n          );\n        }\n      })}\n    </div>\n  );\n}\n\nexport function ClueBox(props) {\n  function clueBoxOnClick(number) {\n    props.onClick(number, props.direction);\n  }\n  let num = null;\n  let direction = null;\n  if (props.selectedClue !== null) {\n    num = props.selectedClue.num;\n    direction = props.selectedClue.direction;\n  }\n  return (\n    <div\n      style={{\n        fontWeight: \"bold\",\n        width: \"300px\",\n        display: \"inline-block\",\n        verticalAlign: \"top\",\n        margin: \"5px\",\n      }}\n    >\n      <div style={{ border: \"1px solid black\", padding: \"5px\" }}>\n        {DIRNAME[props.direction]}\n      </div>\n      {Object.entries(props.clues).map((entry) => {\n        const [number, vals] = entry;\n        const selected = props.direction === direction && number === num;\n        const [clueText, len, releaseDate] = vals;\n\n        const now = new Date();\n        const text =\n          now.getMonth() === 11 && now.getDate() > releaseDate\n            ? clueText\n            : `Released on December ${releaseDate}.`;\n        function onClick() {\n          clueBoxOnClick(number);\n        }\n        return (\n          <Clue\n            number={number}\n            clue={text}\n            len={len}\n            onClick={onClick}\n            selected={selected}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport function Clue(props) {\n  let classNames = \"clue\";\n  if (props.selected) {\n    classNames = `${classNames} selected`;\n  }\n  return (\n    <div className={classNames} onClick={props.onClick}>\n      {props.number}. {props.clue} ({props.len})\n    </div>\n  );\n}\n","export const AC = \"ac\";\nexport const DN = \"dn\";\nexport const UP = \"up\";\nexport const DOWN = \"down\";\nexport const LEFT = \"left\";\nexport const RIGHT = \"right\";\nexport const DIRNAME = { ac: \"Across\", dn: \"Down\" };\n\nexport class Coord {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  equals(other) {\n    return other !== null && this.x === other.x && this.y === other.y;\n  }\n  nextCell(direction, forwards = true) {\n    const increment = forwards ? 1 : -1;\n    if (direction === AC) {\n      return new Coord(this.x + increment, this.y);\n    } else {\n      return new Coord(this.x, this.y + increment);\n    }\n  }\n}\n\nexport class ClueSeq {\n  constructor(x, y, length, direction) {\n    this.x = x;\n    this.y = y;\n    this.length = length;\n    this.direction = direction;\n  }\n  equals(other) {\n    return (\n      other !== null &&\n      this.x === other.x &&\n      this.y === other.y &&\n      this.length === other.length &&\n      this.direction === other.direction\n    );\n  }\n}\n\nexport class ClueDetails {\n  constructor(num, direction, clue, letters, releaseDate) {\n    this.num = num;\n    this.direction = direction;\n    this.clue = clue;\n    this.letters = letters;\n    this.releaseDate = releaseDate;\n  }\n  equals(other) {\n    return (\n      other !== null &&\n      this.num === other.num &&\n      this.direction === other.direction\n    );\n  }\n}\n\nexport function cellInArray(array, cell) {\n  for (var k = 0; k < array.length; k++) {\n    const { x, y } = array[k];\n    if (x === cell.x && y === cell.y) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function cellInClue(clue, cell) {\n  if (clue.direction === AC) {\n    for (var i = clue.x; i < clue.x + clue.length; i++) {\n      if (cell.x === i && cell.y === clue.y) {\n        return true;\n      }\n    }\n  }\n  if (clue.direction === DN) {\n    for (var i = clue.y; i < clue.y + clue.length; i++) {\n      if (cell.x == clue.x && cell.y == i) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nexport function getWhiteCells(h, v, blackCells) {\n  const cells = [];\n  const whiteCells = [];\n  /* Make array of white cells. */\n  for (let i = 0; i < h; i++) {\n    for (let j = 0; j < v; j++) {\n      let blackCell = false;\n      for (var k = 0; k < blackCells.length; k++) {\n        const bCell = blackCells[k];\n        if (bCell.x === i && bCell.y === j) {\n          blackCell = true;\n        }\n      }\n      if (!blackCell) {\n        whiteCells.push(new Coord(i, j));\n      }\n      cells.push([i, j, blackCell]);\n    }\n  }\n  return [whiteCells, cells];\n}\n\nexport function figureOutClues(acSquares, dnSquares, whiteSquares) {\n  /* Collect clues and write in numbers */\n  var acrossClues = [];\n  var downClues = [];\n  var clueNumber = 1;\n  /* loop from right to left then top to bottom */\n  for (var j = 0; j < dnSquares; j++) {\n    for (var i = 0; i < acSquares; i++) {\n      var cell = new Coord(i, j);\n      var acrossCount = 0;\n      var downCount = 0;\n      if (cellInArray(whiteSquares, cell)) {\n        /* Start of across clue */\n        if (i === 0 || !cellInArray(whiteSquares, new Coord(i - 1, j))) {\n          acrossCount = 1;\n          for (var k = i + 1; k < acSquares; k++) {\n            if (cellInArray(whiteSquares, new Coord(k, j))) {\n              acrossCount += 1;\n            } else {\n              break;\n            }\n          }\n          if (acrossCount > 1) {\n            acrossClues[clueNumber] = new ClueSeq(i, j, acrossCount, AC);\n          }\n        }\n        /* Start of down clue */\n        if (j === 0 || !cellInArray(whiteSquares, new Coord(i, j - 1))) {\n          downCount = 1;\n          for (var l = j + 1; l < dnSquares; l++) {\n            if (cellInArray(whiteSquares, new Coord(i, l))) {\n              downCount += 1;\n            } else {\n              break;\n            }\n          }\n          if (downCount > 1) {\n            downClues[clueNumber] = new ClueSeq(i, j, downCount, DN);\n          }\n        }\n        if (acrossCount > 1 || downCount > 1) {\n          clueNumber += 1;\n        }\n      }\n    }\n  }\n  return {\n    ac: acrossClues,\n    dn: downClues\n  };\n}\n"],"names":["CrosswordPage","xwdData","useStaticQuery","allXwd2020Json","edges","node","title","preamble","acrossSize","across_size","downSize","down_size","blackSquares","black_squares","rawClues","clues","ac","dn","forEach","element","number","clue","length","date","blackCells","map","_ref","x","y","Coord","React","Layout","SEO","keywords","Crossword","h","v","FilledCell","props","style","position","width","height","top","left","className","EmptyCell","contents","setContents","useState","backgroundColor","selected","highlight","ref","input","focus","onClick","type","onKeyUp","event","console","log","key","match","selectNextCell","selectNextClue","moveCell","UP","DOWN","LEFT","RIGHT","value","CurrentClue","text","num","direction","letters","releaseDate","now","Date","getMonth","getDate","padding","fontWeight","margin","selectedClueSeq","setSelectedClueSeq","selectedClue","setSelectedClue","selectedCell","setSelectedCell","whiteCells","cells","getWhiteCells","figureOutClues","clueSeq","Object","entries","clueDets","ClueDetails","equals","crosswordOnClick","dir","clickedClue","id","Grid","ClueBox","AC","DN","clueCells","doHighlight","justClicked","cell","i","blackCell","cellIsBlack","matched","acHighlighted","dnHighlighted","values","cellInClue","forwards","nextCell","dirClues","otherDirection","otherDirClues","newClue","coord","highlightedCells","push","k","l","j","e","display","verticalAlign","border","DIRNAME","entry","vals","clueText","len","Clue","clueBoxOnClick","classNames","this","_proto","prototype","other","increment","ClueSeq","cellInArray","array","bCell","acSquares","dnSquares","whiteSquares","acrossClues","downClues","clueNumber","acrossCount","downCount"],"sourceRoot":""}