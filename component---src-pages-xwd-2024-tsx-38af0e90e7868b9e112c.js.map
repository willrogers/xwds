{"version":3,"file":"component---src-pages-xwd-2024-tsx-38af0e90e7868b9e112c.js","mappings":"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","sources":["webpack://xwds/./src/pages/xwd2024.tsx"],"sourcesContent":["import React, { useEffect, useReducer, useState } from \"react\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport { Crossword } from \"../components/xwd\";\nimport { AC, ClueSeq, Coord, DN } from \"../components/xwd_utils\";\nimport { Keyboard, KeyboardButton } from \"../components/keyboard\";\n\nconst CrosswordPage = (): JSX.Element => {\n  const [showKeyboard, setShowKeyboard] = useState<boolean>(false);\n  const [selectedCell, setSelectedCell] = useState<Coord | null>(null);\n  const [selectedClueSeq, setSelectedClueSeq] = useState<ClueSeq | null>(null);\n  const [filledCells, setFilledCells] = useState<Record<string, string>>({});\n  const data = useStaticQuery(graphql`\n    query {\n      allXwd2024Json {\n        edges {\n          node {\n            title\n            preamble\n            across_size\n            down_size\n            black_squares\n            clues {\n              ac {\n                number\n                clue\n                length\n                date\n              }\n              dn {\n                number\n                clue\n                length\n                date\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n  const xwdData = data.allXwd2024Json.edges[0].node;\n  const title = xwdData.title;\n  const preamble = xwdData.preamble;\n  const acrossSize = xwdData.across_size;\n  const downSize = xwdData.down_size;\n  const blackSquares = xwdData.black_squares;\n  const rawClues = xwdData.clues;\n  const clues = { ac: {}, dn: {} };\n  function selectNextCell(forwards = true) {\n    console.log(`selected cell ${selectedCell}`);\n    if (selectedCell && selectedClueSeq) {\n      const x = selectedCell.x;\n      const y = selectedCell.y;\n      if (selectedClueSeq.direction === AC) {\n        if (forwards && x !== selectedClueSeq.x + selectedClueSeq.length - 1) {\n          setSelectedCell(new Coord(x + 1, y));\n        } else if (!forwards && x !== selectedClueSeq.x) {\n          setSelectedCell(new Coord(x - 1, y));\n        }\n      }\n      if (selectedClueSeq.direction === DN) {\n        if (forwards && y !== selectedClueSeq.y + selectedClueSeq.length - 1) {\n          setSelectedCell(new Coord(x, y + 1));\n        } else if (!forwards && y !== selectedClueSeq.y) {\n          setSelectedCell(new Coord(x, y - 1));\n        }\n      }\n    }\n  }\n  const keyPressed = (letter: string) => {\n    console.log(`pressed ${letter}`);\n    const backspace = letter === \"\\u232B\" || letter === \"Backspace\";\n    const cellContents = backspace ? \"\" : letter;\n    const nextForward = !backspace;\n\n    const newFilledCells = {\n      ...filledCells,\n    };\n    if (selectedCell) {\n      newFilledCells[selectedCell.str()] = cellContents;\n    }\n    console.log(newFilledCells);\n    setFilledCells(newFilledCells);\n    selectNextCell(nextForward);\n  };\n  const handleKeyUp = (event: KeyboardEvent) => keyPressed(event.key);\n  useEffect(() => {\n    document.addEventListener(\"keyup\", handleKeyUp);\n    return () => {\n      document.removeEventListener(\"keyup\", handleKeyUp);\n    };\n  });\n  rawClues.ac.forEach((element) => {\n    clues.ac[element.number] = [element.clue, element.length, element.date];\n  });\n  rawClues.dn.forEach((element) => {\n    clues.dn[element.number] = [element.clue, element.length, element.date];\n  });\n\n  const blackCells = blackSquares.map(([x, y]) => new Coord(x, y));\n\n  return (\n    <>\n      <Layout>\n        <SEO title=\"Crosswords\" keywords={[`gatsby`, `application`, `react`]} />\n        <Crossword\n          title={title}\n          preamble={preamble}\n          blackCells={blackCells}\n          h={acrossSize}\n          v={downSize}\n          clues={clues}\n          selectedCell={selectedCell}\n          setSelectedCell={setSelectedCell}\n          selectedClueSeq={selectedClueSeq}\n          setSelectedClueSeq={setSelectedClueSeq}\n          filledCells={filledCells}\n          setFilledCells={setFilledCells}\n          selectNextCell={selectNextCell}\n        />\n      </Layout>\n      {showKeyboard && (\n        <Keyboard\n          keyPressed={keyPressed}\n          hideKeyboardPressed={() => setShowKeyboard(false)}\n        />\n      )}\n      <KeyboardButton keyboardPressed={() => setShowKeyboard(!showKeyboard)} />\n    </>\n  );\n};\n\nexport default CrosswordPage;\n"],"names":["CrosswordPage","showKeyboard","setShowKeyboard","useState","selectedCell","setSelectedCell","selectedClueSeq","setSelectedClueSeq","filledCells","setFilledCells","xwdData","useStaticQuery","allXwd2024Json","edges","node","title","preamble","acrossSize","across_size","downSize","down_size","blackSquares","black_squares","rawClues","clues","ac","dn","selectNextCell","forwards","console","log","x","y","direction","AC","length","Coord","DN","keyPressed","letter","backspace","cellContents","nextForward","newFilledCells","str","handleKeyUp","event","key","useEffect","document","addEventListener","removeEventListener","forEach","element","number","clue","date","blackCells","map","_ref","React","Layout","SEO","keywords","Crossword","h","v","Keyboard","hideKeyboardPressed","KeyboardButton","keyboardPressed"],"sourceRoot":""}